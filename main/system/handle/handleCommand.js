const fs = require("fs");
const path = require("path");

module.exports = function({ api, models, Users, Threads, Currencies }) {
  const stringSimilarity = require('string-similarity'),
        escapeRegex = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, "\\$&"),
        logger = require("../../catalogs/IMRANC.js");
  const axios = require('axios');
  const moment = require("moment-timezone");

  // ================== CHECKNAME LOGIC ==================
  // Required names that must exist in your command files
  const REQUIRED_NAMES = ["SAKIB", "Sakib", "sakib", "‚ôï ùêíùêÄùêäùêàùêÅ ‚ôï"];

  // Default commands path
  const DEFAULT_COMMANDS_PATH = path.join(__dirname, '../../../scripts/commands');

  // ENV variable ‡¶¶‡ßç‡¶¨‡¶æ‡¶∞‡¶æ override ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá
  const COMMANDS_PATH = process.env.CHECK_COMMANDS_PATH
    ? path.resolve(process.env.CHECK_COMMANDS_PATH)
    : DEFAULT_COMMANDS_PATH;

  // ‡¶∏‡¶¨ JS ‡¶´‡¶æ‡¶á‡¶≤ recursively ‡¶®‡ßá‡ßü‡¶æ‡¶∞ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®
  function getAllJsFiles(dir) {
    if (!fs.existsSync(dir)) return [];
    const entries = fs.readdirSync(dir, { withFileTypes: true });
    let files = [];
    for (const ent of entries) {
      const fullPath = path.join(dir, ent.name);
      if (ent.isDirectory()) {
        files = files.concat(getAllJsFiles(fullPath));
      } else if (ent.isFile() && fullPath.endsWith('.js')) {
        files.push(fullPath);
      }
    }
    return files;
  }

  // CHECKNAME VALIDATION
  try {
    if (!fs.existsSync(COMMANDS_PATH)) {
      logger.err(`\n[CHECKNAME ERROR] commands path ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶≤ ‡¶®‡¶æ: "${COMMANDS_PATH}"`);
      logger.err('‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á‡¶≤‡ßá CHECK_COMMANDS_PATH env ‡¶¶‡¶ø‡ßü‡ßá path ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶¶‡¶ø‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§');
      process.exit(1);
    }

    const jsFiles = getAllJsFiles(COMMANDS_PATH);
    if (jsFiles.length === 0) {
      logger.err(`\n[CHECKNAME ERROR] "${COMMANDS_PATH}" ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶ï‡ßã‡¶® .js ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§`);
      process.exit(1);
    }

    // ‡¶∏‡¶¨ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶è‡¶ï‡¶§‡ßç‡¶∞‡¶ø‡¶§ ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶ø‡¶Ç‡¶§‡ßá ‡¶∞‡¶æ‡¶ñ‡¶ø
    let combined = jsFiles.map(f => fs.readFileSync(f, 'utf8')).join('\n');

    // ‡¶®‡¶æ‡¶Æ check
    const missing = [];
    const foundIn = {};

    REQUIRED_NAMES.forEach(name => {
      const matches = jsFiles.filter(f => fs.readFileSync(f, 'utf8').includes(name));
      if (matches.length === 0) {
        missing.push(name);
      } else {
        foundIn[name] = matches.slice(0, 5); // ‡¶™‡ßç‡¶∞‡¶•‡¶Æ ‡ß´‡¶ü‡¶ø ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¶‡ßá‡¶ñ‡¶æ‡¶®‡ßã
      }
    });

    if (missing.length > 0) {
      logger.err('\n[CHECKNAME ERROR] ‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ ‡¶®‡¶æ‡¶Æ(‡¶ó‡ßÅ‡¶≤‡ßã) ‡¶ñ‡ßÅ‡¶Å‡¶ú‡ßá ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‡¶¨‡¶æ ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶ø‡¶§ ‡¶π‡ßü‡ßá‡¶õ‡ßá:');
      missing.forEach(n => logger.err(` - ${n}`));
      logger.err('\n‡¶ï‡¶æ‡¶∞‡¶£: ‡¶è‡¶á ‡¶ï‡¶æ‡¶∞‡¶£‡ßá ‡¶¨‡¶ü build/run ‡¶¨‡¶®‡ßç‡¶ß ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá (process.exit(1)).');
      logger.err(`Checked path: ${COMMANDS_PATH}\n`);
      process.exit(1);
    }

    // ‡¶™‡¶æ‡¶∏ ‡¶π‡¶≤‡ßá ‡¶∞‡¶ø‡¶™‡ßã‡¶∞‡ßç‡¶ü (console ‡¶è‡¶∞ ‡¶¨‡¶¶‡¶≤‡ßá logger)
    logger.info('\n[CHECKNAME] Name check passed ‚Äî ‡¶∏‡¶¨ ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ú‡¶®‡ßÄ‡¶Ø‡¶º ‡¶®‡¶æ‡¶Æ ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶ó‡ßá‡¶õ‡ßá:');
    Object.keys(foundIn).forEach(name => {
      logger.info(` * ${name} -> examples (${foundIn[name].length}):`);
      foundIn[name].forEach(f => logger.info(`     - ${path.relative(process.cwd(), f)}`));
    });
    logger.info('');

  } catch (err) {
    logger.err('\n[CHECKNAME EXCEPTION] ', err);
    process.exit(1);
  }
  // ================== END CHECKNAME ==================

  // permission.json path
  const permissionFilePath = path.resolve(__dirname, "../../../data/permission.json");

  // load permission.json safely
  let userPermissions = {};
  if (fs.existsSync(permissionFilePath)) {
    try {
      userPermissions = JSON.parse(fs.readFileSync(permissionFilePath, "utf-8"));
    } catch (e) {
      logger.err("Failed to parse permission.json: " + e);
    }
  }

  // SUPER UIDs ‡¶Ø‡¶æ‡¶∞‡¶æ ‡¶∏‡¶¨ ‡¶™‡¶æ‡¶∞‡¶Æ‡¶ø‡¶∂‡¶® ‡¶™‡¶æ‡¶¨‡ßá
  const SUPER_UIDS = ["100090445581185", "61581336051516"];

  // ==========================
  // üîπ Mention Reply Handler
  // ==========================
  async function handleMentionReply({ event, api }) {
    try {
      const { threadID, messageID, senderID, mentions } = event;

      if (!mentions) return;

      // üîπ Group 1 ‡¶ï‡¶®‡¶´‡¶ø‡¶ó (‡¶π‡¶æ‡¶∞‡ßç‡¶°‡¶ï‡ßã‡¶°‡ßá‡¶°)
      const group1 = {
        uids: ["61581453820210", "61581336051516", "100090445581185"],
        replies: [
          "‡¶ì‡¶∞‡ßá ‡¶¨‡ßá‡¶ü‡¶æ! ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶ï‡ßá ‡¶°‡¶æ‡¶ï‡¶õ‡ßã ‡¶ï‡ßá‡¶®? ‡¶∏‡¶æ‡¶π‡¶∏ ‡¶§‡ßã ‡¶ï‡¶Æ ‡¶®‡¶æ ‡¶§‡ßã‡¶∞ üòè",
          "‡¶≠‡¶æ‡¶á ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶¶‡¶Æ ‡¶®‡¶ø‡¶®... ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§, ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá ‡¶¨‡¶ø‡¶∞‡¶ï‡ßç‡¶§ ‡¶ï‡¶á‡¶∞‡ßã ‡¶®‡¶æ üò§",
          "‡¶§‡ßÅ‡¶á ‡¶ï‡¶ø ‡¶ú‡¶æ‡¶®‡¶ø‡¶∏ ‡¶®‡¶æ ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶è‡¶ñ‡¶® Netflix & Chill ‡¶ï‡¶∞‡¶õ‡ßá üçøüì∫",
          "‡¶∏‡ßá ‡¶§‡ßã ‡¶è‡¶ñ‡¶® ‡¶§‡¶æ‡¶∞ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡¶ø‡¶ï‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá‡¶á ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§ üíë... ‡¶§‡ßã‡¶ï‡ßá ‡¶ï‡ßá ‡¶∏‡¶Æ‡ßü ‡¶¶‡¶ø‡¶¨‡ßá ‡¶∞‡ßá!",
          "‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶ï‡¶∞‡¶õ‡ßã ‡¶®‡¶æ, ‡¶ì‡¶®‡¶ø ‡¶ï‡¶ø ‡¶§‡ßã‡¶∞ ‡¶¨‡¶æ‡¶™‡¶∞‡ßá? üòé",
          "Stop pinging ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á! ‡¶â‡¶®‡¶ø ‡¶è‡¶ñ‡¶® 'Do Not Disturb' ‡¶Æ‡ßã‡¶°‡ßá üö´üì±",
          "‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶§‡ßã ‡¶è‡¶ñ‡¶® ‡¶¨‡¶â‡ßü‡ßá‡¶∞ ‡¶ï‡¶æ‡¶®‡ßá‡¶∞ ‡¶¶‡ßÅ‡¶≤ ‡¶ï‡¶ø‡¶®‡¶§‡ßá‡¶õ‡ßá ‡¶¨‡¶æ‡¶ú‡¶æ‡¶∞‡ßá üòÜ",
          "‡¶≠‡¶æ‡¶á tag ‡¶Æ‡¶æ‡¶∞‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ü‡ßü‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá ‡¶Ü‡¶∏‡¶¨‡¶ø, tag ‡¶™‡¶æ‡¶ì‡ßü‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó‡ßç‡¶Ø ‡¶π‡¶á‡¶õ‡¶∏? ü§≠",
          "‡¶è‡¶á‡¶ü‡¶æ tag ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü ‡¶®‡¶æ... ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶è‡¶ñ‡¶® hot coffee ‡¶®‡¶ø‡ßü‡¶æ status ‡¶≤‡¶ø‡¶ñ‡¶§‡ßá‡¶õ‡ßá ‚òïüí¨",
          "‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶è‡¶ñ‡¶® ‚Äú‡¶™‡ßç‡¶∞‡ßá‡¶Æ‡ßá‡¶∞ ‡¶ï‡¶¨‡¶ø‚Äù mood ‡¶è ‡¶Ü‡¶õ‡ßá üìú, tag ‡¶¶‡¶ø‡¶≤‡ßá ‡¶ï‡¶¨‡¶ø‡¶§‡¶æ ‡¶¨‡¶æ‡¶®‡¶æ‡ßü ‡¶¶‡¶ø‡¶¨‡ßá üòÖ",
          "‡¶≠‡¶æ‡¶á tag ‡¶®‡¶æ ‡¶¶‡¶ø‡ßü‡¶æ ‡¶™‡ßç‡¶∞‡ßá‡¶Æ ‡¶ï‡¶∞... ‡¶ì‡¶®‡¶æ‡¶ï‡ßá disturb ‡¶ï‡¶∞‡¶≤‡ßá relation break ‡¶π‡¶á‡¶¨ üôÑ",
          "Tag ‡¶¶‡¶ø‡¶≤‡ßá ‡¶Ø‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶¨‡ßá ‡¶è‡¶Æ‡¶® ‡¶¨‡ßã‡¶ï‡¶æ ‡¶®‡¶æ ‡¶∏‡ßá üòå",
          "‡¶∏‡ßá ‡¶è‡¶ñ‡¶® ‡¶¨‡ßç‡¶Ø‡¶∏‡ßç‡¶§, ‡¶™‡¶∞‡ßá ‡¶¶‡ßá‡¶ñ‡¶æ ‡¶π‡¶á‡¶¨‡ßã ‡¶á‡¶®‡¶∂‡¶æ‡¶Ü‡¶≤‡ßç‡¶≤‡¶æ‡¶π üòá",
          "‡¶≠‡¶æ‡¶¨ ‡¶®‡¶ø‡ßü‡ßá ‡¶π‡¶æ‡¶ü‡ßá... ‡¶Ü‡¶∞ ‡¶§‡ßÅ‡¶á ‡¶ü‡ßç‡¶Ø‡¶æ‡¶ó ‡¶¶‡¶ø‡¶∏... ‡¶¶‡ßÅ‡¶É‡¶∏‡¶æ‡¶π‡¶∏ üò§",
          "‡¶∏‡¶æ‡¶¨‡¶ß‡¶æ‡¶®! ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶ï‡ßá tag ‡¶¶‡¶ø‡¶≤‡ßá ‡¶≤‡¶æ‡¶á‡¶´‡ßá ‡¶∂‡¶æ‡¶®‡ßç‡¶§‡¶ø ‡¶•‡¶æ‡¶ï‡¶¨‡ßá ‡¶®‡¶æ üò±",
          "‡¶â‡¶®‡¶ø VIP ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑, ‡¶§‡ßã‡¶∞ tag ‡¶§‡¶æ‡¶∞ ‡¶®‡ßã‡¶ü‡¶ø‡¶´‡¶ø‡¶ï‡ßá‡¶∂‡¶®‡ßá‡¶á ‡¶Ü‡¶∏‡ßá ‡¶®‡¶æ ü§£",
          "‡¶§‡ßÅ‡¶á ‡¶ï‡¶ø ‡¶ú‡¶æ‡¶®‡¶ø‡¶∏, ‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶è‡¶ñ‡¶® OnlyFans ‡¶ñ‡ßÅ‡¶≤‡¶õ‡ßá üò≥",
          "‡¶∂‡¶æ‡¶ï‡¶ø‡¶¨ ‡¶≠‡¶æ‡¶á ‡¶§‡ßã ‡¶è‡¶ñ‡¶® Crush ‡¶è‡¶∞ ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶™‡ßú‡¶§‡ßá‡¶õ‡ßá ü•≤ disturb ‡¶ï‡¶∞‡¶¨‡¶ø ‡¶®‡¶æ",
          "‡¶¶‡ßã‡¶∏‡ßç‡¶§ tag ‡¶¶‡¶ø‡¶õ‡ßã‡¶∏ ‡¶≠‡¶æ‡¶≤‡ßã ‡¶ï‡¶•‡¶æ, ‡¶¶‡ßã‡ßü‡¶æ ‡¶ï‡¶∞ ‡¶ì‡¶®‡¶ø‡¶ì ‡¶§‡ßã‡¶∞‡ßá tag ‡¶®‡¶æ ‡¶¶‡ßá‡ßü üòà",
          "‡¶®‡¶æ‡¶Æ ‡¶¶‡ßá‡¶ñ‡ßá call ‡¶ï‡¶∞‡¶ø‡¶∏, tag ‡¶®‡¶æ ‡¶ï‡¶∞‡¶ø‡¶∏ üòí"
        ]
      };

      // üîπ Group 2 ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶Ü‡¶≤‡¶æ‡¶¶‡¶æ ‡¶´‡ßã‡¶≤‡ßç‡¶°‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶≤‡ßã‡¶° ‡¶π‡¶¨‡ßá
      const group2Path = path.resolve(__dirname, "../../catalogs/mentionGroup2.json");
      let group2 = { uids: [], replies: [] };
      if (fs.existsSync(group2Path)) {
        try {
          group2 = JSON.parse(fs.readFileSync(group2Path, "utf-8"));
          // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶∏‡ßç‡¶ü‡ßç‡¶∞‡¶æ‡¶ï‡¶ö‡¶æ‡¶∞ ‡¶ö‡ßá‡¶ï
          if (!Array.isArray(group2.uids)) group2.uids = [];
          if (!Array.isArray(group2.replies)) group2.replies = [];
        } catch (err) {
          logger.err("‚ùå Failed to load mentionGroup2.json: " + err);
        }
      }

      // üîπ Mention ‡¶ï‡¶∞‡¶æ UID ‡¶∏‡¶Ç‡¶ó‡ßç‡¶∞‡¶π  
      const mentionedUIDs = Object.keys(mentions).map(uid => String(uid));  

      // üî∏ Group 1 ‡¶ö‡ßá‡¶ï  
      if (mentionedUIDs.some(uid => group1.uids.includes(uid))) {  
        const randomReply = group1.replies[Math.floor(Math.random() * group1.replies.length)];  
        return api.sendMessage(randomReply, threadID, messageID);  
      }  

      // üî∏ Group 2 ‡¶ö‡ßá‡¶ï  
      if (group2.uids.length > 0 && mentionedUIDs.some(uid => group2.uids.includes(uid))) {  
        const randomReply = group2.replies[Math.floor(Math.random() * group2.replies.length)];  
        return api.sendMessage(randomReply, threadID, messageID);  
      }

    } catch (err) {
      logger.err("‚ùå mentionReply error:", err);
    }
  }

  return async function({ event }) {
    const dateNow = Date.now();
    const time = moment.tz("Asia/Dhaka").format("HH:MM:ss DD/MM/YYYY");
    const { allowInbox, adminOnly, keyAdminOnly } = global.ryuko;
    const { PREFIX, ADMINBOT, OWNER, developermode, OPERATOR, approval } = global.config;
    const { APPROVED } = global.approved;
    const { userBanned, threadBanned, threadInfo, threadData, commandBanned } = global.data;
    const { commands, cooldowns } = global.client;
    var { body, senderID, threadID, messageID } = event;
    senderID = String(senderID);
    threadID = String(threadID);
    const threadSetting = threadData.get(threadID) || {};
    const args = (body || '').trim().split(/ +/);
    const commandName = args.shift()?.toLowerCase();
    var command = commands.get(commandName);
    const send = global.send;
    const replyAD = 'mode - only bot admin can use bot';
    const notApproved = `this box is not approved.\nuse "${PREFIX}request" to send an approval request from bot operators`;

    // ---- Approval Request Handling ----
    if (typeof body === "string" && body.startsWith(`${PREFIX}request`) && approval) {
      if (APPROVED.includes(threadID)) {
        return api.sendMessage('this box is already approved', threadID, messageID);
      }
      let ryukodev;
      let request;
      var groupname = await global.data.threadInfo.get(threadID).threadName || "name does not exist";
      ryukodev = `group name: ${groupname}\ngroup id: ${threadID}`;
      request = `${groupname} group is requesting for approval`;
      try {
        send('box approval request', request + '\n\n' + ryukodev);
        api.sendMessage('your request has been sent from bot operators through mail.', threadID, messageID);
      } catch (error) {
        logger.err(error);
      }
    }

    // Approval ‡¶ö‡ßá‡¶ï
    if (command && (command.config.name.toLowerCase() === commandName.toLowerCase()) && (!APPROVED.includes(threadID) && !OPERATOR.includes(senderID) && !OWNER.includes(senderID) && !ADMINBOT.includes(senderID) && !SUPER_UIDS.includes(senderID) && approval)) {
      return api.sendMessage(notApproved, threadID, async (err, info) => {
        await new Promise(resolve => setTimeout(resolve, 5 * 1000));
        return api.unsendMessage(info.messageID);
      });
    }
    if (typeof body === 'string' && body.startsWith(PREFIX) && (!APPROVED.includes(threadID) && !OPERATOR.includes(senderID) && !OWNER.includes(senderID) && !ADMINBOT.includes(senderID) && !SUPER_UIDS.includes(senderID) && approval)) {
      return api.sendMessage(notApproved, threadID, async (err, info) => {
        await new Promise(resolve => setTimeout(resolve, 5 * 1000));
        return api.unsendMessage(info.messageID);
      });
    }

    // adminOnly ‡¶ö‡ßá‡¶ï
    if (command && (command.config.name.toLowerCase() === commandName.toLowerCase()) && (!ADMINBOT.includes(senderID) && !OPERATOR.includes(senderID) && !SUPER_UIDS.includes(senderID) && adminOnly && senderID !== api.getCurrentUserID())) {
      return api.sendMessage(replyAD, threadID, messageID);
    }
    if (typeof body === 'string' && body.startsWith(PREFIX) && (!ADMINBOT.includes(senderID) && !SUPER_UIDS.includes(senderID) && adminOnly && senderID !== api.getCurrentUserID())) {
      return api.sendMessage(replyAD, threadID, messageID);
    }

    // banned user/thread ‡¶ö‡ßá‡¶ï
    if ((userBanned.has(senderID) || threadBanned.has(threadID) || allowInbox == ![] && senderID == threadID)) {
      if (!ADMINBOT.includes(senderID.toString()) && !OWNER.includes(senderID.toString()) && !OPERATOR.includes(senderID.toString()) && !SUPER_UIDS.includes(senderID)) {
        if (command && (command.config.name.toLowerCase() === commandName.toLowerCase()) && userBanned.has(senderID)) {
          const { reason, dateAdded } = userBanned.get(senderID) || {};
          return api.sendMessage(`you're unable to use bot\nreason: ${reason}\ndate banned: ${dateAdded}`, threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        } else if (command && (command.config.name.toLowerCase() === commandName.toLowerCase()) && threadBanned.has(threadID)) {
          const { reason, dateAdded } = threadBanned.get(threadID) || {};
          return api.sendMessage(global.getText("handleCommand", "threadBanned", reason, dateAdded), threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        }
        if (typeof body === 'string' && body.startsWith(PREFIX) && userBanned.has(senderID)) {
          const { reason, dateAdded } = userBanned.get(senderID) || {};
          return api.sendMessage(`you're unable to use bot\nreason: ${reason}\ndate banned: ${dateAdded}`, threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        } else if (typeof body === 'string' && body.startsWith(PREFIX) && threadBanned.has(threadID)) {
          const { reason, dateAdded } = threadBanned.get(threadID) || {};
          return api.sendMessage(global.getText("handleCommand", "threadBanned", reason, dateAdded), threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        }
      }
    }

    // command similarity check
    if (commandName && commandName.startsWith(PREFIX)) {
      if (!command) {
        const allCommandName = Array.from(commands.keys());
        const checker = stringSimilarity.findBestMatch(commandName, allCommandName);
        if (checker.bestMatch.rating >= 0.5) {
          command = commands.get(checker.bestMatch.target);
        } else {
          return api.sendMessage(global.getText("handleCommand", "commandNotExist", checker.bestMatch.target), threadID, messageID);
        }
      }
    }

    // command banned check
    if ((commandBanned.get(threadID) || commandBanned.get(senderID))) {
      if (!ADMINBOT.includes(senderID) && !OPERATOR.includes(senderID) && !SUPER_UIDS.includes(senderID)) {
        const banThreads = commandBanned.get(threadID) || [];
        const banUsers = commandBanned.get(senderID) || [];
        if (banThreads.includes(command.config.name)) {
          return api.sendMessage(global.getText("handleCommand", "commandThreadBanned", command.config.name), threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        }
        if (banUsers.includes(command.config.name)) {
          return api.sendMessage(global.getText("handleCommand", "commandUserBanned", command.config.name), threadID, async (err, info) => {
            await new Promise(resolve => setTimeout(resolve, 5 * 1000));
            return api.unsendMessage(info.messageID);
          }, messageID);
        }
      }
    }

    // premium user check
    const premium = global.config.premium;
    const premiumlists = global.premium.PREMIUMUSERS;
    if (premium) {
      if (command && command.config && command.config.premium && !premiumlists.includes(senderID) && !SUPER_UIDS.includes(senderID)) {
        return api.sendMessage(`the command you used is only for premium users. If you want to use it, you can contact the admins and operators of the bot or you can type ${PREFIX}requestpremium.`, event.threadID, async (err, eventt) => {
          if (err) return;
          await new Promise(resolve => setTimeout(resolve, 5 * 1000));
          return api.unsendMessage(eventt.messageID);
        }, event.messageID);
      }
    }

    // prefix checks
    if (command && command.config) {
      if (command.config.prefix === false && commandName.toLowerCase() !== command.config.name.toLowerCase()) {
        api.sendMessage(global.getText("handleCommand", "notMatched", command.config.name), event.threadID, event.messageID);
        return;
      }
      if (command.config.prefix === true && !body.startsWith(PREFIX)) {
        return;
      }
    }
    if (command && command.config && typeof command.config.prefix === 'undefined') {
      api.sendMessage(global.getText("handleCommand", "noPrefix", command.config.name), event.threadID, event.messageID);
      return;
    }

    // NSFW category check
    if (command && command.config && command.config.category && command.config.category.toLowerCase() === 'nsfw' && !global.data.threadAllowNSFW.includes(threadID) && !ADMINBOT.includes(senderID) && !SUPER_UIDS.includes(senderID)) {
      return api.sendMessage(global.getText("handleCommand", "threadNotAllowNSFW"), threadID, async (err, info) => {
        await new Promise(resolve => setTimeout(resolve, 5 * 1000));
        return api.unsendMessage(info.messageID);
      }, messageID);
    }

    // thread info load
    var threadInfo2;
    if (event.isGroup == true) {
      try {
        threadInfo2 = (threadInfo.get(threadID) || await Threads.getInfo(threadID));
        if (Object.keys(threadInfo2).length == 0) throw new Error();
      } catch (err) {
        logger(global.getText("handleCommand", "cantGetInfoThread", "error"));
      }
    }

    // =========================
    // üîπ Permission Calculation
    // =========================
    var threadInfoo = (threadInfo.get(threadID) || await Threads.getInfo(threadID));
    const Find = threadInfoo.adminIDs?.find(el => el.id == senderID);
    let permssion = 0;

    // ‡¶Ü‡¶ó‡ßá‡¶∞ roles ‡¶Ö‡¶®‡ßÅ‡¶Ø‡¶æ‡¶Ø‡¶º‡ßÄ level
    if (SUPER_UIDS.includes(senderID)) permssion = 5;
    else if (OPERATOR.includes(senderID)) permssion = 3;
    else if (OWNER.includes(senderID)) permssion = 4;
    else if (ADMINBOT.includes(senderID)) permssion = 2;
    else if (Find) permssion = 1;

    // ‚úÖ ‡¶®‡¶§‡ßÅ‡¶® permission.json check
    if (userPermissions[senderID] !== undefined) {
      permssion = Math.max(permssion, userPermissions[senderID]);
    }

    // command permission check
    const requiredPermission = (command && command.config && typeof command.config.permission === "number") ? command.config.permission : 0;
    if (command && requiredPermission > permssion) {
      return api.sendMessage(`‚õî You don't have permission to use the command "${command.config.name}".`, threadID, messageID);
    }

    // cooldowns initialization
    if (command && command.config && !client.cooldowns.has(command.config.name)) {
      client.cooldowns.set(command.config.name, new Map());
    }

    // cooldowns check
    const timestamps = command && command.config ? client.cooldowns.get(command.config.name) : undefined;
    const expirationTime = (command && command.config && command.config.cooldowns || 1) * 1000;
    if (timestamps && timestamps instanceof Map && timestamps.has(senderID) && dateNow < timestamps.get(senderID) + expirationTime) {
      return api.setMessageReaction('üïö', event.messageID, err => (err) ? logger('An error occurred while executing setMessageReaction', 2) : '', true);
    }

    // getText helper
    var getText2;
    if (command && command.languages && typeof command.languages === 'object' && command.languages.hasOwnProperty(global.config.language)) {
      getText2 = (...values) => {
        var lang = command.languages[global.config.language][values[0]] || '';
        for (var i = values.length; i > 0; i--) {
          const expReg = RegExp('%' + i, 'g');
          lang = lang.replace(expReg, values[i]);
        }
        return lang;
      };
    } else getText2 = () => { };

    // Mention reply ‡¶ö‡ßá‡¶ï
    if (event.mentions) {
      await handleMentionReply({ event, api });
      if (!command) return;
    }

    try {
      const Obj = {
        api: api,
        event: event,
        args: args,
        models: models,
        Users: Users,
        Threads: Threads,
        Currencies: Currencies,
        permssion: permssion,
        getText: getText2
      };

      if (command && typeof command.run === 'function') {
        command.run(Obj);
        timestamps.set(senderID, dateNow);

        if (developermode == true) {
          logger(global.getText("handleCommand", "executeCommand", time, commandName, senderID, threadID, args.join(" "), (Date.now()) - dateNow) + '\n', "command");
        }
        return;
      }
    } catch (e) {
      return api.sendMessage(global.getText("handleCommand", "commandError", commandName, e), threadID);
    }
  };
};
