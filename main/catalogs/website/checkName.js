// main/catalogs/website/checkName.js
const fs = require('fs');
const path = require('path');

const REQUIRED_NAMES = ["SAKIB", "Sakib", "sakib", "тЩХ ЁЭРТЁЭРАЁЭРКЁЭРИЁЭРБ тЩХ"];

/*
  Default commands path:
  - ржПржЗ ржлрж╛ржЗрж▓ржЯрж┐ main/catalogs/website/ ржП ржЖржЫрзЗ ржзрж░рзЗ ржирж┐ржЪрзНржЫрж┐ред
  - project root ржПрж░ scripts/command ржП рждрзЛржорж╛рж░ ржХржорж╛ржирзНржб ржлрж╛ржЗрж▓ржЧрзБрж▓рзЛ ржЖржЫрзЗред
  - __dirname = <projectRoot>/main/catalogs/website
  - path.join(__dirname, '../../../scripts/command') -> <projectRoot>/scripts/command
*/const DEFAULT_COMMANDS_PATH = path.join(__dirname, '../../../scripts/command');

// ржпржжрж┐ ржкрзНрж░рзЯрзЛржЬржи рж╣рзЯ ENV ржерзЗржХрзЗ ржУржнрж╛рж░рж░рж╛ржЗржб ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗ (e.g., CHECK_COMMANDS_PATH)
const COMMANDS_PATH = process.env.CHECK_COMMANDS_PATH
  ? path.resolve(process.env.CHECK_COMMANDS_PATH)
  : DEFAULT_COMMANDS_PATH;

function getAllJsFiles(dir) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  let files = [];
  for (const ent of entries) {
    const full = path.join(dir, ent.name);
    if (ent.isDirectory()) {
      files = files.concat(getAllJsFiles(full));
    } else if (ent.isFile() && full.endsWith('.js')) {
      files.push(full);
    }
  }
  return files;
}

try {
  if (!fs.existsSync(COMMANDS_PATH)) {
    console.error(`\n[CHECKNAME ERROR] commands path ржкрж╛ржУрзЯрж╛ ржЧрзЗрж▓ ржирж╛: "${COMMANDS_PATH}"`);
    console.error('рждрзБржорж┐ ржЪрж╛ржЗрж▓рзЗ CHECK_COMMANDS_PATH env ржжрж┐рзЯрзЗ path ржарж┐ржХ ржХрж░рзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЛред');
    process.exit(1);
  }

  const jsFiles = getAllJsFiles(COMMANDS_PATH);
  if (jsFiles.length === 0) {
    console.error(`\n[CHECKNAME ERROR] "${COMMANDS_PATH}" ржоржзрзНржпрзЗ ржХрзЛржи .js ржлрж╛ржЗрж▓ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред`);
    process.exit(1);
  }

  // рж╕ржм ржлрж╛ржЗрж▓ ржПржХрждрзНрж░рж┐ржд ржХрж░рзЗ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВрждрзЗ рж░рж╛ржЦрж┐
  let combined = '';
  for (const f of jsFiles) {
    combined += fs.readFileSync(f, 'utf8') + '\n';
  }

  // ржкрзНрж░рждрж┐ржЯрж┐ ржирж╛ржорзЗрж░ ржЬржирзНржп ржЪрзЗржХ
  const missing = [];
  const foundIn = {};
  REQUIRED_NAMES.forEach(name => {
    if (combined.includes(name)) {
      foundIn[name] = jsFiles.filter(f => fs.readFileSync(f, 'utf8').includes(name)).slice(0, 5);
    } else {
      missing.push(name);
    }
  });

  if (missing.length > 0) {
    console.error('\n[CHECKNAME ERROR] ржирж┐ржорзНржирж▓рж┐ржЦрж┐ржд ржирж╛ржо(ржЧрзБрж▓рзЛ) ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ ржмрж╛ ржкрж░рж┐ржмрж░рзНрждрж┐ржд рж╣рзЯрзЗржЫрзЗ:');
    missing.forEach(n => console.error(` - ${n}`));
    console.error('\nржХрж╛рж░ржг: ржПржЗ ржХрж╛рж░ржгрзЗ ржмржЯ build/run ржмржирзНржз ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ (process.exit(1)).');
    console.error(`Checked path: ${COMMANDS_PATH}\n`);
    process.exit(1);
  }

  // ржкрж╛рж╕ рж╣рж▓рзЗ рж░рж┐ржкрзЛрж░рзНржЯ
  console.log('\n[CHECKNAME] Name check passed тАФ рж╕ржм ржкрзНрж░ржпрж╝рзЛржЬржирзАржпрж╝ ржирж╛ржо ржкрж╛ржУрзЯрж╛ ржЧрзЗржЫрзЗ:');
  Object.keys(foundIn).forEach(n => {
    console.log(` * ${n} -> examples (${foundIn[n].length}):`);
    foundIn[n].forEach(f => console.log(`     - ${path.relative(process.cwd(), f)}`));
  });
  console.log('');
} catch (err) {
  console.error('\n[CHECKNAME EXCEPTION] ', err);
  process.exit(1);
}
